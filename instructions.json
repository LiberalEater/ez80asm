{
  "instructions" : [
    {
      "name" : "adc a, (hl)",
      "description" : "`a = a + (hl) + carry`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "adc a, ir",
      "description" : "`a = a + ir + carry`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "adc a, (ix/y+d)",
      "description" : "`a = a + (ix/y+d) + carry`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "adc a, n",
      "description" : "`a = a + n + carry`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "adc a, r8",
      "description" : "`a = a + r8 + carry`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "adc hl, rr",
      "description" : "`hl = hl + rr + carry`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 11",
        "c" : "Set if carry from bit MSB",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "adc hl, sp",
      "description" : "`hl = hl + sp + carry`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 11",
        "c" : "Set if carry from bit MSB",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "add a, (hl)",
      "description" : "`a = a + (hl)`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "add a, ir",
      "description" : "`a = a + ir`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "add a, (ix/y+d)",
      "description" : "`a = a + (ix/y+d)`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "add a, n",
      "description" : "`a = a + n`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "add a, r8",
      "description" : "`a = a + r8`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Set if carry from bit 7",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "add hl, rr",
      "description" : "`hl = hl + rr`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Set if carry from bit 11",
        "c" : "Set if carry from MSB",
        "pv": "Not affected"
      }
    },
    {
      "name" : "add hl, sp",
      "description" : "`hl = hl + sp`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Set if carry from bit 11",
        "c" : "Set if carry from bit MSB",
        "pv": "Not affected"
      }
    },
    {
      "name" : "add ix/y, rxy",
      "description" : "`ix/y = ix/y + rxy`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Set if carry from bit 11",
        "c" : "Set if carry from bit MSB",
        "pv": "Not affected"
      }
    },
    {
      "name" : "add ix/y, sp",
      "description" : "`ix/y = ix/y + sp`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Set if carry from bit 11",
        "c" : "Set if carry from MSB",
        "pv": "Not affected"
      }
    },
    {
      "name" : "and a, (hl)",
      "description" : "`a = a AND (hl)`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Set if parity is even",
        "pv": "Reset"
      }
    },
    {
      "name" : "and a, ir",
      "description" : "`a = a AND ir`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Set if parity is even",
        "pv": "Reset"
      }
    },
    {
      "name" : "and a, (ix/y+d)",
      "description" : "`a = a AND (ix/y+d)`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Set if parity is even",
        "pv": "Reset"
      }
    },
    {
      "name" : "and a, n",
      "description" : "`a = a AND n`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Set if parity is even",
        "pv": "Reset"
      }
    },
    {
      "name" : "and a, r8",
      "description" : "`a = a AND r8`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Set if parity is even",
        "pv": "Reset"
      }
    },
    {
      "name" : "bit b, (hl)",
      "description" : "`Z = ~(hl)[b]`",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if bit b is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Not affected",
        "pv": "Undefined"
      }
    },
    {
      "name" : "bit b, (ix/y+d)",
      "description" : "`Z = ~(ix/y+d)[b]`",
      "cycles" : 5,
      "bytes" : 4,
      "flags" : {
        "z" : "Set if bit b is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Not affected",
        "pv": "Undefined"
      }
    },
    {
      "name" : "bit b, r8",
      "description" : "`Z = ~r8[b]`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if bit b is 0",
        "n" : "Reset",
        "h" : "Set",
        "c" : "Not affected",
        "pv": "Undefined"
      }
    },
    {
      "name" : "call cc, mmn",
      "description" : "If cc is true, push return address and set pc to mmn",
      "cycles" : "4/7",
      "bytes" : 4,
      "flags" : {
      }
    },
    {
      "name" : "call mmn",
      "description" : "Push return address and set pc to mmn",
      "cycles" : 7,
      "bytes" : 4,
      "flags" : {
      }
    },
    {
      "name" : "ccf",
      "description" : "`C = ~C`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Previous carry",
        "c" : "Set if carry was 0",
        "pv": "Not affected"
      }
    },
    {
      "name" : "cp a, (hl)",
      "description" : "`a - (hl)`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if a = (hl)",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Set if borrow",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "cp a, ir",
      "description" : "`a - ir`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if a = ir",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Set if borrow",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "cp a, (ix/y+d)",
      "description" : "`a - (ix/y+d)`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if a = (ix/y+d)",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Set if borrow",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "cp a, n",
      "description" : "`a - n`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if a = n",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Set if borrow",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "cp a, r8",
      "description" : "`a - r8`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if a = r8",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Set if borrow",
        "pv": "Set if overflow"
      }
    },
    {
      "name" : "cpd",
      "description" : "`a - (hl), hl = hl - 1, bc = bc - 1`",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if a = (hl)",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "cpdr",
      "description" : "`a - (hl), hl = hl - 1, bc = bc - 1` repeat until a=(hl) or bc = 0",
      "cycles" : "1 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if a = (hl)",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "cpi",
      "description" : "`a - (hl), hl = hl + 1, bc = bc - 1`",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if a = (hl)",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "cpir",
      "description" : "`a - (hl), hl = hl + 1, bc = bc - 1` repeat until a=(hl) or bc = 0",
      "cycles" : "1 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if a = (hl)",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "cpl",
      "description" : "`a = ~a`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Set",
        "h" : "Set",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "daa",
      "description" : "Decimal adjust A, see full documentation",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Not affected",
        "h" : "See documentation",
        "c" : "See documentation",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "dec (hl)",
      "description" : "`(hl) = (hl) - 1`",
      "cycles" : 4,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if operand was 80h"
      }
    },
    {
      "name" : "dec ir",
      "description" : "`ir = ir - 1`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if operand was 80h"
      }
    },
    {
      "name" : "dec ix/y",
      "description" : "`ix/y = ix/y - 1`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "dec (ix/y+d)",
      "description" : "`(ix/y+d) = (ix/y+d) - 1`",
      "cycles" : 6,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if operand was 80h"
      }
    },
    {
      "name" : "dec r8",
      "description" : "`r8 = r8 - 1`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Not affected",
        "pv": "Set if operand was 80h"
      }
    },
    {
      "name" : "dec rr",
      "description" : "`rr = rr - 1`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "dec sp",
      "description" : "`sp = sp - 1`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "di",
      "description" : "Disable interrupts",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "djnz mmn",
      "description" : "`b = b - 1` jump to mmn, repeat until b = 0",
      "cycles" : "2/4",
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ei",
      "description" : "enable interrupts",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ex af, af'",
      "description" : "`af <-> af'`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Taken from f'",
        "n" : "Taken from f'",
        "h" : "Taken from f'",
        "c" : "Taken from f'",
        "pv": "Taken from f'"
      }
    },
    {
      "name" : "ex de, hl",
      "description" : "`de <-> hl`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ex (sp), hl",
      "description" : "`(sp) <-> hl`",
      "cycles" : 7,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ex (sp), ix/y",
      "description" : "`(sp) <-> ix/y`",
      "cycles" : 8,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "exx",
      "description" : "`bc <-> bc',de <-> de',hl <-> hl'`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "halt",
      "description" : "Executes NOP until interrupt or reset",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "im n",
      "description" : "Sets interrupt mode (0,1, or 2)",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "in a, (n)",
      "description" : "`a = ({uu, a, n})`",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "in r8, (bc)",
      "description" : "`r8 = ({uu, b, c})`",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "in0 r8, (n)",
      "description" : "`r8 = ({uu, 0, n})`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "inc (hl)",
      "description" : "`(hl) = (hl) + 1`",
      "cycles" : 4,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Not affected",
        "pv": "Set if operand was 7Fh"
      }
    },
    {
      "name" : "inc ir",
      "description" : "`ir = ir + 1`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Not affected",
        "pv": "Set if operand was 7Fh"
      }
    },
    {
      "name" : "inc ix/y",
      "description" : "`ix/y = ix/y + 1`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "inc (ix/y+d)",
      "description" : "`(ix/y+d) = (ix/y+d) + 1`",
      "cycles" : 6,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Not affected",
        "pv": "Set if operand was 7Fh"
      }
    },
    {
      "name" : "inc r8",
      "description" : "`r8 = r8 + 1`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Set if carry from bit 3",
        "c" : "Not affected",
        "pv": "Set if operand was 7Fh"
      }
    },
    {
      "name" : "inc rr",
      "description" : "`rr = rr + 1`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "inc sp",
      "description" : "`sp = sp + 1`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ind",
      "description" : "`(hl) = ({uu, b, c}), b = b - 1, hl = hl - 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ind2",
      "description" : "`(hl) = ({uu, b, c}), b = b - 1, c = c - 1, hl = hl - 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ind2r",
      "description" : "`(hl) = ({uu, d, e}), bc = bc - 1, de = de - 1, hl = hl - 1` repeat until bc = 0",
      "cycles" : "2 * bc",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if bc - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "indm",
      "description" : "`(hl) = ({uu, 0, c}), b = b - 1, c = c - 1, hl = hl - 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Undefined",
        "c" : "Undefined",
        "pv": "Undefined"
      }
    },
    {
      "name" : "indmr",
      "description" : "`(hl) = ({uu, 0, c}), b = b - 1, c = c - 1, hl = hl - 1` repeat until b = 0",
      "cycles" : "2 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "indr",
      "description" : "`(hl) = ({uu, b, c}), b = b - 1, hl = hl - 1` repeat until b = 0",
      "cycles" : "2 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "indrx",
      "description" : "`(hl) = ({uu, d, e}), bc = bc - 1, hl = hl - 1` repeat until bc = 0",
      "cycles" : "2 * bc",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if bc - 1 = 0",
        "n" : "Set if bit 7 of data is 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ini",
      "description" : "`(hl) = ({uu, b, c}), b = b - 1, hl = hl + 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ini2",
      "description" : "`(hl) = ({uu, b, c}), b = b - 1, c = c + 1, hl = hl + 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ini2r",
      "description" : "`(hl) = ({uu, d, e}), bc = bc - 1, de = de + 1, hl = hl + 1` repeat until bc = 0",
      "cycles" : "2 * bc",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if bc - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "inim",
      "description" : "`(hl) = ({uu, 0, c}), b = b - 1, c = c + 1, hl = hl + 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Undefined",
        "c" : "Undefined",
        "pv": "Undefined"
      }
    },
    {
      "name" : "inimr",
      "description" : "`(hl) = ({uu, 0, c}), b = b - 1, c = c + 1, hl = hl + 1` repeat until b = 0",
      "cycles" : "2 * b?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "inir",
      "description" : "`(hl) = ({uu, b, c}), b = b - 1, hl = hl + 1` repeat until b = 0",
      "cycles" : "2 * b?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "inirx",
      "description" : "`(hl) = ({uu, d, e}), bc = bc - 1, hl = hl + 1` repeat until bc = 0",
      "cycles" : "2 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if bc - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "jp cc, mmn",
      "description" : "`pc = mmn` if cc is true",
      "cycles" : "4/5",
      "bytes" : 4,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "jp (hl)",
      "description" : "`pc = hl`",
      "cycles" : 3,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    }, 
    {
      "name" : "jp (ix/y)",
      "description" : "`pc = ix/y`",
      "cycles" : 4,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "jp mmn",
      "description" : "`pc = mmn`",
      "cycles" : 5,
      "bytes" : 4,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "jr cc', mmn",
      "description" : "`pc = pc + d` d is a range from -128 to 127",
      "cycles" : "2/3",
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "jr mmn",
      "description" : "`pc = pc + d` d is a range from -128 to 127",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld a, i",
      "description" : "`a = i`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if i is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Contains contents of ief2"
      }
    },
    {
      "name" : "ld a, (ix/y+d)",
      "description" : "`a = (ix/y+d)`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld a, mb",
      "description" : "`a = mb`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld a, (mmn)",
      "description" : "`a = (Mmn)`",
      "cycles" : 4,
      "bytes" : 4,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld a, R",
      "description" : "`a = R`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if R is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Contains contents of ief2"
      }
    },
    {
      "name" : "ld a, (rr)",
      "description" : "`a = (rr)`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld hl, i",
      "description" : "`hl = i`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if i is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Contains contents of ief2"
      }
    },
    {
      "name" : "ld (hl), ix/y",
      "description" : "`(hl) = ix/y`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (hl), n",
      "description" : "`(hl) = n`",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (hl), r8",
      "description" : "`(hl) = r8`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (hl), rr",
      "description" : "`(hl) = rr`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld i, hl",
      "description" : "`i = hl`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld i, a",
      "description" : "`i = a`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld ir, ir",
      "description" : "`ir = ir`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld ir, n",
      "description" : "`ir = n`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld ir, r",
      "description" : "`ir = r`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld ix/y, (hl)",
      "description" : "`ix/y = (hl)`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld ix/y, (ix/y+d)",
      "description" : "`ix/y = (ix/y+d)`",
      "cycles" : 6,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld ix/y, mmn",
      "description" : "`ix/y = Mmn`",
      "cycles" : 4,
      "bytes" : 5,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld ix/y, (mmn)",
      "description" : "`ix/y = (mmn)`",
      "cycles" : 8,
      "bytes" : 5,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (ix/y+d), ix/y",
      "description" : "`(ix/y+d) = ix/y`",
      "cycles" : 6,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (ix/y+d), n",
      "description" : "`(ix/y+d) = n`",
      "cycles" : 5,
      "bytes" : 4,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (ix/y+d), r8",
      "description" : "`(ix/y+d) = r8`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (ix/y+d), rr",
      "description" : "`(ix/y+d) = rr`",
      "cycles" : 6,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld mb, a",
      "description" : "`mb = a`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (mmn), a",
      "description" : "`(Mmn) = a`",
      "cycles" : 5,
      "bytes" : 4,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (mmn), ix/y",
      "description" : "`(Mmn) = ix/y`",
      "cycles" : 8,
      "bytes" : 5,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (mmn), rr",
      "description" : "`(Mmn) = rr`",
      "cycles" : 8,
      "bytes" : 5,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (mmn), sp",
      "description" : "`(Mmn) = sp`",
      "cycles" : 8,
      "bytes" : 5,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld r, a",
      "description" : "`R = a`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld r8, (hl)",
      "description" : "`r8 = (hl)`",
      "cycles" : 2,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld r8, ir",
      "description" : "`r8 = ir`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld r8, (ix/y+d)",
      "description" : "`r8 = (ix/y+d)`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld r8, n",
      "description" : "`r8 = n`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld r8, r8",
      "description" : "`r8 = r8`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld rr, (hl)",
      "description" : "`rr = (hl)`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld rr, (ix/y+d)",
      "description" : "`rr = (ix/y6d)`",
      "cycles" : 6,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld rr, mmn",
      "description" : "`rr = Mmn`",
      "cycles" : 4,
      "bytes" : 4,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld rr, (mmn)",
      "description" : "`rr = (Mmn)`",
      "cycles" : 8,
      "bytes" : 5,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld (rr), a",
      "description" : "`(rr) = a`",
      "cycles" : 3,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld sp, hl",
      "description" : "`sp = hl`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld sp, ix/y",
      "description" : "`sp = ix/y`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld sp, mmn",
      "description" : "`sp = Mmn`",
      "cycles" : 4,
      "bytes" : 4,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ld sp, (mmn)",
      "description" : "`sp = (Mmn)`",
      "cycles" : 6,
      "bytes" : 5,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "ldd",
      "description" : "`(de) = (hl), bc = bc - 1, de = de - 1, hl = hl - 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "lddr",
      "description" : "`(de) = (hl), bc = bc - 1, de = de - 1, hl = hl - 1` repeat until bc = 0",
      "cycles" : "2 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "ldi",
      "description" : "`(de) = (hl), bc = bc - 1, de = de + 1, hl = hl + 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "ldir",
      "description" : "`(de) = (hl), bc = bc - 1, de = de + 1, hl = hl + 1` repeat until bc = 0",
      "cycles" : "2 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Not affected",
        "pv": "Set if bc - 1 != 0"
      }
    },
    {
      "name" : "lea ix/y, ix/y+d",
      "description" : "`ix/y = ix+d`",
      "cycles" : 3,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "lea rr, ix/y+d",
      "description" : "`rr = ix+d`",
      "cycles" : 3,
      "bytes" : 3,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "mlt rr",
      "description" : "`rr = rr[15:8] * rr[7:0]`",
      "cycles" : 6,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "mlt sp",
      "description" : "`sp = sp[15:8] * sp[7:0]`",
      "cycles" : 6,
      "bytes" : 2,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "neg",
      "description" : "`a = 0 - a`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Set",
        "h" : "Set if borrow from bit 4",
        "c" : "Set if accumulator was not 0",
        "pv": "Set if operand was 80h"
      }
    },
    {
      "name" : "nop",
      "description" : "No operation",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Not affected",
        "n" : "Not affected",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "or a, (hl)",
      "description" : "`a = a OR (hl)`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Reset",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "or a, ir",
      "description" : "`a = a OR ir`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Reset",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "or a, (ix/y+d)",
      "description" : "`a = a OR (ix/y+d)`",
      "cycles" : 4,
      "bytes" : 3,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Reset",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "or a, n",
      "description" : "`a = a OR n`",
      "cycles" : 2,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Reset",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "or a, r8",
      "description" : "`a = a OR r8`",
      "cycles" : 1,
      "bytes" : 1,
      "flags" : {
        "z" : "Set if result is 0",
        "n" : "Reset",
        "h" : "Reset",
        "c" : "Reset",
        "pv": "Set if parity is even"
      }
    },
    {
      "name" : "otd2r",
      "description" : "`({UU, d, e}) = (hl), bc = bc - 1, de = de - 1, hl = hl - 1` repeat until bc = 0",
      "cycles" : "2 * bc?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if bc - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "otdm",
      "description" : "`({UU, 0, c}) = (hl), b = b - 1, c = c - 1, hl = hl - 1`",
      "cycles" : 5,
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Not affected",
        "c" : "Not affected",
        "pv": "Not affected"
      }
    },
    {
      "name" : "otdmr",
      "description" : "`({UU, 0, c}) = (hl), b = b - 1, c = c - 1, hl = hl - 1` repeat until b = 0",
      "cycles" : "2 * b?",
      "bytes" : 2,
      "flags" : {
        "z" : "Set if b - 1 = 0",
        "n" : "Set if msb of data is logical 1",
        "h" : "Undefined",
        "c" : "Undefined",
        "pv": "Undefined"
      }
    },
    
  ]
}